<?php

function register_import_check_post_type() {
    register_post_type('import_check', array(
        'labels' => array(
            'name' => 'ƒê·ªãnh danh th√πng h√†ng',
            'singular_name' => 'Danh s√°ch th√πng h√†ng',
            'add_new' => 'Th√™m th√πng h√†ng',
            'add_new_item' => 'Th√™m th√πng h√†ng',
            'edit_item' => 'Ch·ªânh s·ª≠a th√πng h√†ng',
            'new_item' => 'Th√™m th√πng h√†ng',
            'view_item' => 'Xem m√£ ƒë·ªãnh danh trong th√πng h√†ng',
            'search_items' => 'T√¨m th√πng h√†ng',
            'not_found' => 'Kh√¥ng t√¨m th·∫•y',
            'not_found_in_trash' => 'Kh√¥ng c√≥ trong th√πng r√°c'
        ),
        'public' => true,
        'show_ui' => true,
        'show_in_menu' => 'gpt-manager-tem',
        'supports' => array('title'),
        'has_archive' => true,
    ));
}
add_action('init', 'register_import_check_post_type');

function gpt_render_import_check_tab() {
    $args = array(
        'post_type'      => 'import_check',
        'posts_per_page' => 20,
        'post_status'    => 'publish',
        'orderby'        => 'date',
        'order'          => 'DESC',
    );

    $query = new WP_Query($args);

    echo '<div class="wrap">';
    echo '<h2>üì¶ Danh s√°ch nh·∫≠p th√πng</h2>';
    echo '<p><a href="' . admin_url('post-new.php?post_type=import_check') . '" class="button button-primary">+ Th√™m nh·∫≠p h√†ng m·ªõi</a></p>';

    if ($query->have_posts()) {
        echo '<table class="widefat fixed striped">';
        echo '<thead><tr>
                <th>Ti√™u ƒë·ªÅ</th>
                <th>Ng√†y t·∫°o</th>
                <th>Ng∆∞·ªùi t·∫°o</th>
                <th>Thao t√°c</th>
              </tr></thead>';
        echo '<tbody>';
        while ($query->have_posts()) {
            $query->the_post();
            echo '<tr>';
            echo '<td><strong><a href="' . get_edit_post_link(get_the_ID()) . '">' . get_the_title() . '</a></strong></td>';
            echo '<td>' . get_the_date() . '</td>';
            echo '<td>' . get_the_author() . '</td>';
            echo '<td><a href="' . get_edit_post_link(get_the_ID()) . '" class="button small">S·ª≠a</a></td>';
            echo '</tr>';
        }
        echo '</tbody>';
        echo '</table>';
    } else {
        echo '<p>üì≠ Kh√¥ng c√≥ nh·∫≠p h√†ng n√†o.</p>';
    }

    wp_reset_postdata();
    echo '</div>';
}

function add_import_check_metaboxes() {
    add_meta_box('import_check_fields', 'Th√¥ng tin th√πng', 'render_import_check_fields', 'import_check', 'normal', 'default');
    add_meta_box('import_check_products_box', 'Danh s√°ch s·∫£n ph·∫©m nh·∫≠p v√†o th√πng', 'display_import_check_products_box', 'import_check', 'normal', 'high');
    add_meta_box('import_status_box', 'Tr·∫°ng th√°i ƒë∆°n h√†ng', 'render_import_status_box', 'import_check', 'side');
    add_meta_box('import_logs_box', 'L·ªãch s·ª≠ tr·∫°ng th√°i ƒë∆°n', 'render_import_logs_box', 'import_check', 'side');
    add_meta_box(
        'import_logs_metabox',
        'Nh·∫≠t k√Ω nh·∫≠p h√†ng cho th√πng',
        'display_import_logs_metabox',
        'import_check',
        'normal'
    );
}
add_action('add_meta_boxes', 'add_import_check_metaboxes');

function render_import_check_fields($post) {
    // $order_id = get_post_meta($post->ID, 'order_id', true);
    $import_images = get_post_meta($post->ID, 'import_images', true);
    $macao_ids = get_post_meta($post->ID, 'macao_ids', true);
    $import_date = get_post_meta($post->ID, 'import_date', true);
    $current_user = wp_get_current_user();
    $order_import_by = $current_user->user_login;

    $order_import_by_meta = get_post_meta($post->ID, 'order_import_by', true);
    if (!empty($order_import_by_meta)) {
        $order_import_by = $order_import_by_meta;
    }

    wp_nonce_field('save_import_check_fields', 'order_check_nonce');

    $import_date = get_post_meta($post->ID, 'import_date', true);
    if (empty($import_date)) {
        $import_date = current_time('mysql');
    }
    ?>
    <style>
        .form-group {
            margin-bottom: 16px;
        }

        .form-group label {
            margin-bottom: 8px;
            display: block;
        }
    </style>
    <div class="form-group">
        <label for="import_date">Ng√†y gi·ªù nh·∫≠p:</label>
        <input type="datetime-local" name="import_date" id="import_date"
            value="<?php echo esc_attr(date('Y-m-d\TH:i', strtotime($import_date))); ?>"
            style="width:100%;">
    </div>
    <div class="form-group">
        <label for="order_import_by">Ng∆∞·ªùi nh·∫≠p kho:</label>
        <input type="text" name="order_import_by" id="order_import_by" value="<?php echo esc_attr($order_import_by); ?>" style="width:100%;" disabled>
    </div>
    <div class="form-group">
        <label for="import_images">·∫¢nh ƒë∆°n h√†ng (c√≥ th·ªÉ ch·ªçn nhi·ªÅu):</label>
        <input type="hidden" name="import_images" id="import_images" value="<?php echo esc_attr($import_images); ?>">
        <button type="button" class="button upload_gallery_button">Ch·ªçn ·∫£nh</button>
        <div id="order_images_preview" style="margin-top:10px;">
            <?php
            if (!empty($import_images)) {
                $image_urls = explode(',', $import_images);
                foreach ($image_urls as $img) {
                    echo '<img src="' . esc_url($img) . '" style="max-width:100px;margin:5px;border:1px solid #ddd;">';
                }
            }
            ?>
        </div>
    </div>

    <?php
        $logs = get_post_meta($post->ID, '_inventory_logs', true);
        if (!empty($logs)) {
            echo '<div style="background:#f9f9f9;padding:10px;margin-top:20px;border:1px solid #ddd;">';
            echo '<h4>L·ªãch s·ª≠ c·∫≠p nh·∫≠t t·ªìn kho:</h4><ul>';
            foreach ($logs as $log) {
                echo '<li>' . esc_html($log) . '</li>';
            }
            echo '</ul></div>';
        }
    ?>

    <script>
        jQuery(document).ready(function($){
            $('.upload_gallery_button').click(function(e){
                e.preventDefault();
                var custom_uploader = wp.media({
                    title: 'Ch·ªçn ·∫£nh ƒë∆°n h√†ng',
                    button: {
                        text: 'Ch·ªçn ·∫£nh'
                    },
                    multiple: true
                }).on('select', function() {
                    var attachment_urls = [];
                    var preview_html = '';
                    custom_uploader.state().get('selection').each(function(file){
                        var url = file.toJSON().url;
                        attachment_urls.push(url);
                        preview_html += '<img src="' + url + '" style="max-width:100px;margin:5px;border:1px solid #ddd;">';
                    });
                    $('#import_images').val(attachment_urls.join(','));
                    $('#order_images_preview').html(preview_html);
                }).open();
            });
        });
    </script>

    <?php
}

function import_update_post_meta_if_changed($post_id, $key, $new_value) {
    $old_value = get_post_meta($post_id, $key, true);
    if ($new_value !== $old_value) {
        update_post_meta($post_id, $key, $new_value);
    }
}

function save_import_check_fields($post_id) {
    if (!isset($_POST['order_check_nonce']) || !wp_verify_nonce($_POST['order_check_nonce'], 'save_import_check_fields')) return;
    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) return;
    if (!current_user_can('edit_post', $post_id)) return;

    global $wpdb;
    $barcode_table = BIZGPT_PLUGIN_WP_BARCODE;
    $box_table = BIZGPT_PLUGIN_WP_BOX_MANAGER;

    $current_user = wp_get_current_user();
    $order_import_by = $current_user->user_login;

    // C·∫≠p nh·∫≠t c√°c meta fields c∆° b·∫£n
    import_update_post_meta_if_changed($post_id, 'import_images', sanitize_text_field($_POST['import_images']));
    import_update_post_meta_if_changed($post_id, 'import_date', sanitize_text_field($_POST['import_date']));
    import_update_post_meta_if_changed($post_id, 'order_import_by', sanitize_text_field($_POST['order_import_by']) ?  sanitize_text_field($_POST['order_import_by']) : $order_import_by);

    // X·ª≠ l√Ω tr·∫°ng th√°i import
    $old_status = get_post_meta($post_id, 'import_status', true);
    $new_status = isset($_POST['import_status']) ? sanitize_text_field($_POST['import_status']) : $old_status;
    
    if ($new_status !== $old_status) {
        update_post_meta($post_id, 'import_status', $new_status);
        $status_logs = get_post_meta($post_id, 'import_status_logs', true);
        if (!is_array($status_logs)) $status_logs = [];
        $status_logs[] = [
            'status' => $new_status, 
            'timestamp' => current_time('mysql'),
            'user' => $current_user->display_name
        ];
        update_post_meta($post_id, 'import_status_logs', $status_logs);
    }

    // Lu√¥n l∆∞u th√¥ng tin boxes v√†o post meta
    $boxes = $_POST['import_check_boxes'] ?? [];
    $existing_boxes = get_post_meta($post_id, '_import_check_boxes', true);
    
    if ($boxes !== $existing_boxes) {
        update_post_meta($post_id, '_import_check_boxes', $boxes);
    }

    // Ki·ªÉm tra tr·∫°ng th√°i: ch·ªâ c·∫≠p nh·∫≠t SQL khi tr·∫°ng th√°i l√† "completed"
    if ($new_status !== 'completed') {
        $logs = get_post_meta($post_id, '_import_logs', true);
        if (!is_array($logs)) $logs = [];
        
        $timestamp = current_time('mysql');
        $logs[] = [
            'status' => sprintf("[%s] ‚è≥ Tr·∫°ng th√°i: %s - Ch∆∞a c·∫≠p nh·∫≠t v√†o database", 
                               $timestamp, 
                               $new_status === 'pending' ? 'Ch·ªù duy·ªát' : ucfirst($new_status)),
            'timestamp' => $timestamp
        ];
        
        update_post_meta($post_id, '_import_logs', $logs);
        return;
    }

    // Validate t·∫•t c·∫£ m√£ tr∆∞·ªõc khi l∆∞u v√†o database
    $validation_errors = [];
    $all_valid = true;

    foreach ($boxes as $box) {
        $box_code = sanitize_text_field($box['box_code']);
        $product_codes = sanitize_textarea_field($box['product_codes']);
        
        if (empty($box_code) || empty($product_codes)) continue;

        // Check box code status
        $existing_box = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM $box_table WHERE barcode = %s",
            $box_code
        ));

        if (!$existing_box) {
            $validation_errors[] = "M√£ th√πng '$box_code' kh√¥ng t·ªìn t·∫°i trong database";
            $all_valid = false;
        } elseif ($existing_box->status !== 'unused') {
            $validation_errors[] = "M√£ th√πng '$box_code' ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng (status: {$existing_box->status})";
            $all_valid = false;
        }

        // Check product codes status
        $codes = array_filter(array_map('trim', explode("\n", $product_codes)));
        foreach ($codes as $code) {
            $existing_barcode = $wpdb->get_row($wpdb->prepare(
                "SELECT * FROM $barcode_table WHERE barcode = %s",
                $code
            ));

            if (!$existing_barcode) {
                $validation_errors[] = "M√£ s·∫£n ph·∫©m '$code' kh√¥ng t·ªìn t·∫°i trong database";
                $all_valid = false;
            } elseif ($existing_barcode->status !== 'unused') {
                $validation_errors[] = "M√£ s·∫£n ph·∫©m '$code' ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng (status: {$existing_barcode->status})";
                $all_valid = false;
            }
        }
    }

    // N·∫øu c√≥ l·ªói validation, kh√¥ng cho ph√©p l∆∞u
    if (!$all_valid) {
        $logs = get_post_meta($post_id, '_import_logs', true);
        if (!is_array($logs)) $logs = [];
        
        $timestamp = current_time('mysql');
        foreach ($validation_errors as $error) {
            $logs[] = [
                'status' => sprintf("[%s] ‚ùå L·ªói validation: %s", $timestamp, $error),
                'timestamp' => $timestamp
            ];
        }
        
        update_post_meta($post_id, '_import_logs', $logs);
        
        // ƒê·∫∑t l·∫°i tr·∫°ng th√°i v·ªÅ pending
        update_post_meta($post_id, 'import_status', 'pending');
        
        // Th√¥ng b√°o l·ªói cho admin
        add_action('admin_notices', function() use ($validation_errors) {
            echo '<div class="notice notice-error is-dismissible">';
            echo '<p><strong>Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t v√†o database do l·ªói validation:</strong></p>';
            echo '<ul>';
            foreach ($validation_errors as $error) {
                echo '<li>' . esc_html($error) . '</li>';
            }
            echo '</ul>';
            echo '</div>';
        });
        
        return;
    }

    // N·∫øu validation passed, ti·∫øp t·ª•c c·∫≠p nh·∫≠t database
    if ($boxes !== $existing_boxes || $old_status !== 'completed') {
        $logs = get_post_meta($post_id, '_import_logs', true);
        if (!is_array($logs)) $logs = [];

        $timestamp = current_time('mysql');
        $logs[] = [
            'status' => sprintf("[%s] ‚úÖ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t database - Tr·∫°ng th√°i: Ho√†n th√†nh", $timestamp),
            'timestamp' => $timestamp
        ];

        foreach ($boxes as $box) {
            $box_code = sanitize_text_field($box['box_code']);
            $product_quantity = intval($box['product_quantity']);
            $product_codes = sanitize_textarea_field($box['product_codes']);
            $lot_date = sanitize_textarea_field($box['lot_date']);

            if (empty($box_code) || empty($product_codes)) continue;

            $codes = array_filter(array_map('trim', explode("\n", $product_codes)));
            $list_barcode = implode(',', $codes);

            // Update box status to 'imported'
            $update_result = $wpdb->update(
                $box_table,
                [
                    'list_barcode' => $list_barcode,
                    'order_id' => $post_id,
                    'status' => 'imported',
                    'updated_at' => $timestamp
                ],
                ['barcode' => $box_code]
            );

            if ($update_result !== false) {
                $logs[] = [
                    'status' => sprintf("[%s] üì¶ C·∫≠p nh·∫≠t th√πng [%s] v·ªõi %d m√£ s·∫£n ph·∫©m", $timestamp, $box_code, count($codes)),
                    'timestamp' => $timestamp
                ];
            } else {
                $logs[] = [
                    'status' => sprintf("[%s] ‚ùå L·ªói c·∫≠p nh·∫≠t th√πng [%s]: %s", $timestamp, $box_code, $wpdb->last_error),
                    'timestamp' => $timestamp
                ];
            }

            // Update product codes status to 'used'
            $successful_codes = 0;
            $failed_codes = 0;

            foreach ($codes as $code) {
                $code = trim($code);
                if (empty($code)) continue;

                $update_barcode_result = $wpdb->update(
                    $barcode_table,
                    [
                        'box_barcode' => $box_code,
                        'product_date' => $lot_date,
                        'status' => 'unused',
                    ],
                    ['barcode' => $code]
                );

                if ($update_barcode_result !== false) {
                    $successful_codes++;
                } else {
                    $failed_codes++;
                    $logs[] = [
                        'status' => sprintf("[%s] ‚ùå L·ªói c·∫≠p nh·∫≠t m√£ %s: %s", $timestamp, $code, $wpdb->last_error),
                        'timestamp' => $timestamp
                    ];
                }
            }

            if ($successful_codes > 0) {
                $logs[] = [
                    'status' => sprintf("[%s] ‚úÖ Th√†nh c√¥ng: %d m√£ ƒë∆∞·ª£c g√°n v√†o th√πng %s", $timestamp, $successful_codes, $box_code),
                    'timestamp' => $timestamp
                ];
            }

            if ($failed_codes > 0) {
                $logs[] = [
                    'status' => sprintf("[%s] ‚ö†Ô∏è Th·∫•t b·∫°i: %d m√£ kh√¥ng th·ªÉ x·ª≠ l√Ω cho th√πng %s", $timestamp, $failed_codes, $box_code),
                    'timestamp' => $timestamp
                ];
            }
        }

        $logs[] = [
            'status' => sprintf("[%s] üéâ Ho√†n t·∫•t c·∫≠p nh·∫≠t database cho t·∫•t c·∫£ th√πng h√†ng", $timestamp),
            'timestamp' => $timestamp
        ];

        update_post_meta($post_id, '_import_logs', $logs);
    }
}
add_action('save_post', 'save_import_check_fields');

add_action('admin_enqueue_scripts', function($hook) {
    if ($hook === 'post.php' || $hook === 'post-new.php') {
        wp_enqueue_style('select2-css', 'https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css');
        wp_enqueue_script('select2-js', 'https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js', ['jquery'], null, true);
    }
});


function display_import_logs_metabox($post) {
    // L·∫•y logs t·ª´ post_meta
    $logs = get_post_meta($post->ID, '_import_logs', true);
    
    // N·∫øu kh√¥ng c√≥ logs, hi·ªÉn th·ªã th√¥ng b√°o
    if (empty($logs)) {
        echo '<p>No logs available.</p>';
        return;
    }
    
    // ƒê·∫£o ng∆∞·ª£c th·ª© t·ª± logs ƒë·ªÉ hi·ªÉn th·ªã t·ª´ m·ªõi ƒë·∫øn c≈©
    $logs = array_reverse($logs);
    
    // Hi·ªÉn th·ªã logs
    echo '<ul>';
    foreach ($logs as $log) {
        // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa c√°c kh√≥a 'timestamp' v√† 'status'
        $timestamp = isset($log['timestamp']) ? esc_html($log['timestamp']) : 'N/A';
        $status = isset($log['status']) ? esc_html($log['status']) : 'Unknown';
        
        echo '<li>' . $timestamp . ' - ' . $status . '</li>';
    }
    echo '</ul>';
}

function render_import_status_box($post) {
    $current_status = get_post_meta($post->ID, 'import_status', true);
    $current_user = wp_get_current_user();
    $all_statuses = [
        'pending' => 'Ch·ªù duy·ªát',
        'completed' => 'Ho√†n th√†nh'
    ];

    // Ki·ªÉm tra quy·ªÅn c·ªßa user hi·ªán t·∫°i
    $is_admin = current_user_can('administrator');
    $is_editor = current_user_can('editor');
    $is_quan_ly_kho = in_array('quan_ly_kho', $current_user->roles);
        
    // X√°c ƒë·ªãnh c√°c tr·∫°ng th√°i ƒë∆∞·ª£c ph√©p ch·ªçn
    if ($is_admin || $is_quan_ly_kho) {
        // Admin v√† Qu·∫£n l√Ω kho c√≥ full quy·ªÅn
        $allowed_statuses = $all_statuses;
    } elseif ($is_editor) {
        // Bi√™n t·∫≠p vi√™n ch·ªâ ƒë∆∞·ª£c ch·ªçn "Ch·ªù duy·ªát"
        $allowed_statuses = ['pending' => 'Ch·ªù duy·ªát'];
    } else {
        // C√°c role kh√°c kh√¥ng ƒë∆∞·ª£c thay ƒë·ªïi tr·∫°ng th√°i
        $allowed_statuses = [];
    }

    echo '<div style="margin-bottom: 15px;">';
        
    // Hi·ªÉn th·ªã th√¥ng b√°o v·ªÅ t√°c ƒë·ªông c·ªßa tr·∫°ng th√°i
    if ($current_status === 'pending' || empty($current_status)) {
        echo '<div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 3px; padding: 10px; margin-bottom: 10px;">';
        echo '<strong>‚è≥ Tr·∫°ng th√°i: Ch·ªù duy·ªát</strong><br>';
        echo '<small style="color: #856404;">D·ªØ li·ªáu ch·ªâ ƒë∆∞·ª£c l∆∞u v√†o post meta, ch∆∞a c·∫≠p nh·∫≠t v√†o database ch√≠nh.</small>';
        echo '</div>';
    } elseif ($current_status === 'completed') {
        echo '<div style="background: #d4edda; border: 1px solid #c3e6cb; border-radius: 3px; padding: 10px; margin-bottom: 10px;">';
        echo '<strong>‚úÖ Tr·∫°ng th√°i: Ho√†n th√†nh</strong><br>';
        echo '<small style="color: #155724;">D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√†o database ch√≠nh.</small>';
        echo '</div>';
    }

    echo '<select name="import_status">';
        
    foreach ($allowed_statuses as $value => $label) {
        $selected = selected($current_status, $value, false);
        echo '<option value="' . esc_attr($value) . '" ' . $selected . '>' . esc_html($label) . '</option>';
    }
        
    if (!array_key_exists($current_status, $allowed_statuses) && !empty($current_status)) {
        $current_label = isset($all_statuses[$current_status]) ? $all_statuses[$current_status] : $current_status;
        echo '<option value="' . esc_attr($current_status) . '" selected disabled>' . esc_html($current_label) . ' (Ch·ªâ ƒë·ªçc)</option>';
    }
        
    echo '</select>';
        
    // Th√™m th√¥ng b√°o c·∫£nh b√°o cho admin v√† qu·∫£n l√Ω kho
    if ($is_admin || $is_quan_ly_kho) {
        echo '<div style="background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 3px; padding: 8px; margin-top: 10px; font-size: 12px;">';
        echo '<strong style="color: #bc0000;">üìã L∆∞u √Ω:</strong><br>';
        echo '‚Ä¢ <strong>Ch·ªù duy·ªát:</strong> Ch·ªâ l∆∞u v√†o nh√°p ƒë·ªÉ qu·∫£n l√Ω duy·ªát<br>';
        echo '‚Ä¢ <strong>Ho√†n th√†nh:</strong> C·∫≠p nh·∫≠t d·ªØ li·ªáu cho th√πng<br>';
        echo '‚Ä¢ <strong style="color: #bc0000;">Khi ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i "Ho√†n th√†nh" th√¨ s·∫Ω kh√¥ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi.</strong>';
        echo '</div>';
    }
        
    echo '</div>';
}
function render_import_logs_box($post) {
    $logs = get_post_meta($post->ID, 'import_status_logs', true);
    if (!is_array($logs) || empty($logs)) {
        echo '<p>Ch∆∞a c√≥ log n√†o.</p>';
        return;
    }

    echo '<ul style="margin: 0; padding: 0;">';
    foreach ($logs as $log) {
        $status = esc_html($log['status']);
        $timestamp = esc_html($log['timestamp']);
        $user = isset($log['user']) ? esc_html($log['user']) : 'H·ªá th·ªëng';
        
        $status_color = '';
        switch ($log['status']) {
            case 'Ho√†n th√†nh':
                $status_color = 'color: #28a745; font-weight: bold;';
                break;
            case 'Ch·ªù duy·ªát':
                $status_color = 'color: #ffc107; font-weight: bold;';
                break;
        }
        
        echo '<li style="margin-bottom: 8px; padding: 5px; background: #f8f9fa; border-left: 3px solid #007cba;">';
        echo '<div style="' . $status_color . '">' . $status . '</div>';
        echo '<small style="color: #666;">B·ªüi: <strong>' . $user . '</strong></small><br>';
        echo '<small style="color: #999;">' . $timestamp . '</small>';
        echo '</li>';
    }
    echo '</ul>';
}

add_filter('manage_import_check_posts_columns', function($columns) {
    $new_columns = [];
    foreach ($columns as $key => $value) {
        $new_columns[$key] = $value;
        if ($key === 'title') {
            $new_columns['import_status'] = 'Tr·∫°ng th√°i';
            $new_columns['approved_by'] = 'Ng∆∞·ªùi duy·ªát';
        }
    }
    return $new_columns;
});

add_action('manage_import_check_posts_custom_column', function($column, $post_id) {
    switch ($column) {
        case 'import_status':
            $status = get_post_meta($post_id, 'import_status', true);
            
            $status_text = get_status_display_text($status);
            $style = '';
            
            switch ($status) {
                case 'completed':
                    $style = 'background: #d4edda; color: #155724; padding: 2px 6px; border-radius: 3px; font-size: 11px; font-weight: bold;';
                    break;
                case 'pending':
                default:
                    $style = 'background: #fff3cd; color: #856404; padding: 2px 6px; border-radius: 3px; font-size: 11px; font-weight: bold;';
                    break;
            }
            echo '<span style="' . $style . '">' . esc_html($status_text) . '</span>';
            break;
            
        case 'approved_by':
            $approved_by = get_post_meta($post_id, 'approved_by', true);
            echo $approved_by ? esc_html($approved_by) : '-';
            break;
    }
}, 10, 2);

add_action('restrict_manage_posts', function() {
    global $typenow;
    if ($typenow === 'import_check') {
        $selected = isset($_GET['import_status_filter']) ? $_GET['import_status_filter'] : '';
        echo '<select name="import_status_filter">';
        echo '<option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>';
        echo '<option value="pending"' . selected($selected, 'pending', false) . '>Ch·ªù duy·ªát</option>';
        echo '<option value="completed"' . selected($selected, 'completed', false) . '>Ho√†n th√†nh</option>';
        echo '</select>';
    }
});

add_filter('parse_query', function($query) {
    global $pagenow, $typenow;
    if ($pagenow === 'edit.php' && $typenow === 'import_check' && isset($_GET['import_status_filter']) && $_GET['import_status_filter'] !== '') {
        $query->set('meta_key', 'import_status');
        $query->set('meta_value', $_GET['import_status_filter']);
    }
});

function display_import_check_products_box($post) {
    $boxes = get_post_meta($post->ID, '_import_check_boxes', true);
    if (!is_array($boxes)) $boxes = [];
    ?>
    <style>
        .widefat input, .widefat textarea { width: 100% !important; }
        .summary-stats { background: #f8f9fa; border: 1px solid #dee2e6; padding: 15px; margin-bottom: 20px; display: flex; justify-content: space-around; text-align: center; }
        .stat-item { flex: 1; }
        .stat-number { font-size: 24px; font-weight: bold; color: #0073aa; }
        .stat-label { font-size: 14px; color: #666; margin-top: 5px; }
        .validation-summary { margin: 15px 0; padding: 15px; border-radius: 5px; border-left: 4px solid; }
        .validation-summary.error { border-color: #dc3545; color: #721c24; }
        .validation-summary.success { background: #d4edda; border-color: #28a745; color: #155724; }
        .validation-summary.checking { background: #fff3cd; border-color: #ffc107; color: #856404; }
        .required-field { border: 2px solid #dc3545 !important; background-color: #fff5f5 !important; }
        .valid-field { border: 2px solid #28a745 !important; background-color: #f8fff8 !important; }
        .invalid-code { border: 2px solid #e74c3c !important; background-color: #ffe6e6 !important; }
        .assigned-to-box { border: 2px solid #ff6b35 !important; background-color: #fff4f1 !important; }
        .submit-button-disabled { opacity: 0.5 !important; cursor: not-allowed !important; background-color: #ccc !important; pointer-events: none !important; }
        .checking-progress { margin: 10px 0; padding: 10px; background: #e3f2fd; border-left: 4px solid #2196f3; border-radius: 4px; }
        .check-step { margin: 5px 0; padding: 5px; border-radius: 3px; }
        .check-step.success { background: #d4edda; color: #155724; }
        .check-step.error { background: #f8d7da; color: #721c24; }
        .check-step.warning { background: #fff3cd; color: #856404; }
        .check-step.checking { background: #e3f2fd; color: #1976d2; }
        .spinner { display: inline-block; width: 16px; height: 16px; border: 2px solid #f3f3f3; border-top: 2px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite; margin-right: 8px; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .duplicate-row {
            background-color: #ffe6e6 !important;
            border: 2px solid #e74c3c !important;
            border-radius: 5px;
        }
        .duplicate-row td {
            background-color: #ffe6e6 !important;
        }
    </style>
    
    <div class="summary-stats">
        <div class="stat-item"><div class="stat-number" id="total-boxes">0</div><div class="stat-label">üì¶ T·ªïng s·ªë th√πng</div></div>
        <div class="stat-item"><div class="stat-number" id="total-codes">0</div><div class="stat-label">üè∑Ô∏è T·ªïng s·ªë m√£</div></div>
        <div class="stat-item"><div class="stat-number" id="expected-codes">0</div><div class="stat-label">üìä S·ªë m√£ d·ª± ki·∫øn</div></div>
        <div class="stat-item"><div class="stat-number" id="match-status">-</div><div class="stat-label">‚úÖ Tr·∫°ng th√°i kh·ªõp</div></div>
    </div>

    <div id="validation-summary" class="validation-summary error">
        <h4>‚ö†Ô∏è C·∫ßn nh·∫≠p th√™m th√¥ng tin ƒë·ªÉ c√≥ th·ªÉ c·∫≠p nh·∫≠t</h4>
        <ul id="validation-list"><li>‚ùå Ch∆∞a ki·ªÉm tra d·ªØ li·ªáu</li></ul>
    </div>

    <div id="import_check_boxes_container">
        <table class="widefat" id="import_check_boxes_table" style="margin-bottom:10px;">
            <thead>
                <tr>
                    <th>M√£ ƒë·ªãnh danh th√πng <span style="color: red;">*</span></th>
                    <th>S·ªë l∆∞·ª£ng m√£ s·∫£n ph·∫©m</th>
                    <th>Danh s√°ch m√£ s·∫£n ph·∫©m <span style="color: red;">*</span></th>
                    <th>Date <span style="color: red;">*</span></th>
                    <th>Tr·∫°ng th√°i & Th√¥ng b√°o</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <?php
                if (!empty($boxes)) {
                    foreach ($boxes as $index => $box) {
                        echo render_import_box_row(
                            $box['box_code'] ?? '',
                            $box['product_quantity'] ?? '',
                            $box['product_codes'] ?? '',
                            $box['lot_date'] ?? '',
                            $index
                        );
                    }
                }
                ?>
            </tbody>
        </table>
        <button type="button" class="button" id="add_box_row">+ Th√™m th√πng h√†ng</button>
        <button type="button" class="button button-primary" id="check_all_validations" style="margin-left: 10px;">
            <strong>üîç Ki·ªÉm tra t·∫•t c·∫£</strong>
        </button>
        <span id="last-check-time" style="margin-left: 15px; color: #666; font-style: italic; display: inline-block; margin-top: 6px;"></span>
    </div>
    <span style="margin-top: 12px; display: inline-block;">Vui l√≤ng b·∫•m n√∫t "Ki·ªÉm tra t·∫•t c·∫£" tr∆∞·ªõc khi l∆∞u d·ªØ li·ªáu.</span>

    <script>
        // ============ VALIDATION MANAGER ============
        const ValidationManager = {
            conditions: {
                TITLE: 'title', IMPORT_DATE: 'import_date', BOXES: 'boxes',
                ALL_DATES: 'all_dates', QUANTITIES: 'quantities', NO_DUPLICATES: 'no_duplicates',
                DATABASE_VALID: 'database_valid', PRODUCTS_NOT_ASSIGNED: 'products_not_assigned'
            },
            
            state: {},
            cache: { boxes: {}, products: {}, productAssignments: {} },
            boxRowIndex: <?php echo (is_array($boxes) ? count($boxes) : 0); ?>,
            
            init() {
                Object.keys(this.conditions).forEach(key => this.state[this.conditions[key]] = false);
                this.setupEventListeners();
                this.disableSubmitButtons();
                setTimeout(() => { this.updateStats(); this.updateSummary(); }, 500);
            },

            async checkAll() {
                const summaryDiv = document.getElementById('validation-summary');
                const button = document.getElementById('check_all_validations');
                
                button.disabled = true;
                button.innerHTML = '‚è≥ ƒêang ki·ªÉm tra...';
                
                // Show checking status
                summaryDiv.className = 'validation-summary checking';
                summaryDiv.innerHTML = `
                    <h4><span class="spinner"></span>ƒêang ki·ªÉm tra d·ªØ li·ªáu...</h4>
                    <div id="check-progress"></div>
                `;
                
                const progressDiv = document.getElementById('check-progress');
                let allValid = true;
                
                try {
                    // Step 1: Basic validations
                    this.addCheckStep(progressDiv, 'checking', '<span class="spinner"></span>Ki·ªÉm tra ti√™u ƒë·ªÅ v√† ng√†y nh·∫≠p...');
                    
                    const titleValid = this.validateField('title');
                    const dateValid = this.validateField('import_date');
                    
                    this.updateLastCheckStep(progressDiv, titleValid && dateValid ? 'success' : 'error', 
                        titleValid && dateValid ? '‚úÖ Ti√™u ƒë·ªÅ v√† ng√†y nh·∫≠p h·ª£p l·ªá' : '‚ùå Ti√™u ƒë·ªÅ ho·∫∑c ng√†y nh·∫≠p ch∆∞a h·ª£p l·ªá');
                    
                    if (!titleValid || !dateValid) allValid = false;

                    // Step 2: Box validation
                    this.addCheckStep(progressDiv, 'checking', '<span class="spinner"></span>Ki·ªÉm tra th√¥ng tin th√πng h√†ng...');
                    
                    const boxValidation = this.validateBoxes();
                    let boxMessage = '';
                    
                    if (!boxValidation.hasValidBox) {
                        boxMessage += '‚ùå Ch∆∞a c√≥ th√πng h√†ng h·ª£p l·ªá. ';
                        allValid = false;
                    }
                    if (!boxValidation.allDatesValid) {
                        boxMessage += '‚ùå M·ªôt s·ªë th√πng ch∆∞a nh·∫≠p Date. ';
                        allValid = false;
                    }
                    if (!boxValidation.allQuantitiesMatch) {
                        boxMessage += '‚ö†Ô∏è S·ªë l∆∞·ª£ng m√£ kh√¥ng kh·ªõp ·ªü m·ªôt s·ªë th√πng. ';
                        allValid = false;
                    }
                    
                    if (!boxMessage) boxMessage = '‚úÖ T·∫•t c·∫£ th√πng h√†ng h·ª£p l·ªá';
                    
                    this.updateLastCheckStep(progressDiv, allValid ? 'success' : 'error', boxMessage);

                    // Step 3: Duplicates check
                    this.addCheckStep(progressDiv, 'checking', '<span class="spinner"></span>Ki·ªÉm tra m√£ tr√πng l·∫∑p...');
                    
                    const noDuplicates = await this.checkDuplicates();
                    if (noDuplicates) {
                        this.updateLastCheckStep(progressDiv, 'success', '‚úÖ Kh√¥ng c√≥ m√£ tr√πng l·∫∑p');
                    }
                    
                    if (!noDuplicates) allValid = false;

                    // Step 4: Database existence check
                    this.addCheckStep(progressDiv, 'checking', '<span class="spinner"></span>Ki·ªÉm tra t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu...');
                    
                    const dbValid = await this.checkDatabase();
                    this.updateLastCheckStep(progressDiv, dbValid ? 'success' : 'error', 
                        dbValid ? '‚úÖ T·∫•t c·∫£ m√£ t·ªìn t·∫°i v√† ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng' : '‚ùå C√≥ m√£ kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng');
                    
                    if (!dbValid) allValid = false;

                    // Step 5: Product assignment check
                    this.addCheckStep(progressDiv, 'checking', '<span class="spinner"></span>Ki·ªÉm tra m√£ s·∫£n ph·∫©m ch∆∞a thu·ªôc th√πng n√†o...');
                    
                    const productsNotAssigned = await this.checkProductAssignment();
                    if (productsNotAssigned) {
                        this.updateLastCheckStep(progressDiv, 'success', '‚úÖ T·∫•t c·∫£ m√£ s·∫£n ph·∫©m ch∆∞a thu·ªôc th√πng n√†o');
                    }
                    if (!productsNotAssigned) allValid = false;

                    this.state[this.conditions.DATABASE_VALID] = dbValid;
                    this.state[this.conditions.PRODUCTS_NOT_ASSIGNED] = productsNotAssigned;

                    // Final update
                    this.updateStats();
                    allValid ? this.enableSubmitButtons() : this.disableSubmitButtons();

                    // Show final result
                    setTimeout(() => {
                        this.showFinalResult(allValid, progressDiv);
                        document.getElementById('last-check-time').textContent = `L·∫ßn ki·ªÉm tra cu·ªëi: ${new Date().toLocaleTimeString('vi-VN')}`;
                    }, 500);

                } catch (error) {
                    console.error('Validation error:', error);
                    this.addCheckStep(progressDiv, 'error', '‚ùå C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra. Vui l√≤ng th·ª≠ l·∫°i.');
                    allValid = false;
                }

                button.disabled = false;
                button.innerHTML = 'üîç <strong>Ki·ªÉm tra t·∫•t c·∫£</strong>';
                return allValid;
            },

            addCheckStep(container, type, message) {
                const step = document.createElement('div');
                step.className = `check-step ${type}`;
                step.innerHTML = message;
                container.appendChild(step);
                
                // Auto scroll to bottom
                container.scrollTop = container.scrollHeight;
            },

            updateLastCheckStep(container, type, message) {
                const lastStep = container.lastElementChild;
                if (lastStep) {
                    lastStep.className = `check-step ${type}`;
                    lastStep.innerHTML = message;
                }
            },

            showFinalResult(allValid, progressDiv) {
                const summaryDiv = document.getElementById('validation-summary');
                
                if (allValid) {
                    summaryDiv.className = 'validation-summary success';
                    summaryDiv.innerHTML = `
                        <h4>‚úÖ Ki·ªÉm tra ho√†n t·∫•t - S·∫µn s√†ng c·∫≠p nh·∫≠t!</h4>
                        <p>T·∫•t c·∫£ th√¥ng tin b·∫Øt bu·ªôc ƒë√£ ƒë∆∞·ª£c nh·∫≠p ƒë·∫ßy ƒë·ªß v√† h·ª£p l·ªá.</p>
                        ${progressDiv.innerHTML}
                    `;
                } else {
                    summaryDiv.className = 'validation-summary error';
                    const invalidConditions = this.getInvalidConditions();
                    summaryDiv.innerHTML = `
                        <h4>‚ùå C√≥ l·ªói c·∫ßn s·ª≠a tr∆∞·ªõc khi c·∫≠p nh·∫≠t</h4>
                        <p><strong>C√°c v·∫•n ƒë·ªÅ c·∫ßn kh·∫Øc ph·ª•c:</strong></p>
                        <ul>${invalidConditions.map(condition => `<li>${condition}</li>`).join('')}</ul>
                        <div style="margin-top: 15px;">
                            <summary style="cursor: pointer; font-weight: bold;">Chi ti·∫øt qu√° tr√¨nh ki·ªÉm tra</summary>
                            <div style="margin-top: 10px;">${progressDiv.innerHTML}</div>
                        </div>
                    `;
                }
            },

            getInvalidConditions() {
                const conditionLabels = {
                    [this.conditions.TITLE]: '‚ùå Ti√™u ƒë·ªÅ b√†i vi·∫øt',
                    [this.conditions.IMPORT_DATE]: '‚ùå Ng√†y gi·ªù nh·∫≠p',
                    [this.conditions.BOXES]: '‚ùå √çt nh·∫•t 1 th√πng h√†ng h·ª£p l·ªá',
                    [this.conditions.ALL_DATES]: '‚ùå T·∫•t c·∫£ Date th√πng h√†ng',
                    [this.conditions.QUANTITIES]: '‚ùå S·ªë l∆∞·ª£ng m√£ kh·ªõp',
                    [this.conditions.NO_DUPLICATES]: '‚ùå Kh√¥ng c√≥ m√£ tr√πng l·∫∑p',
                    [this.conditions.DATABASE_VALID]: '‚ùå T·∫•t c·∫£ m√£ ph·∫£i t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu v·ªõi tr·∫°ng th√°i "ch∆∞a s·ª≠ d·ª•ng"',
                    [this.conditions.PRODUCTS_NOT_ASSIGNED]: '‚ùå T·∫•t c·∫£ m√£ s·∫£n ph·∫©m ph·∫£i ch∆∞a thu·ªôc th√πng n√†o'
                };
                
                const invalidConditions = [];
                Object.entries(this.state).forEach(([key, value]) => {
                    if (!value && conditionLabels[key]) invalidConditions.push(conditionLabels[key]);
                });
                
                return invalidConditions;
            },

            validateField(fieldId) {
                const input = document.getElementById(fieldId);
                const isValid = input && input.value.trim().length > 0;
                this.state[this.conditions[fieldId.toUpperCase()]] = isValid;
                
                if (input) {
                    input.style.borderColor = isValid ? '#28a745' : '#dc3545';
                    input.style.backgroundColor = isValid ? '#f8fff8' : '#fff5f5';
                }
                return isValid;
            },

            validateBoxes() {
                const rows = document.querySelectorAll('#import_check_boxes_table tbody tr');
                let hasValidBox = false, allQuantitiesMatch = true, allDatesValid = true, hasAnyBox = false;
                
                rows.forEach((row, index) => {
                    const inputs = this.getRowInputs(row);
                    if (!inputs.all) return;

                    const values = this.getRowValues(inputs);
                    
                    // Ki·ªÉm tra n·∫øu row c√≥ b·∫•t k·ª≥ th√¥ng tin n√†o (k·ªÉ c·∫£ kh√¥ng ƒë·∫ßy ƒë·ªß)
                    const hasAnyData = values.boxCode || values.productCodes || values.expectedQuantity > 0 || values.dateValue;
                    
                    if (hasAnyData) {
                        hasAnyBox = true;
                        
                        // Ki·ªÉm tra th√¥ng tin ƒë·∫ßy ƒë·ªß v√† h·ª£p l·ªá
                        const hasCompleteInfo = values.boxCode && values.productCodes && values.dateValue;
                        
                        if (hasCompleteInfo) {
                            const productCodesList = this.parseProductCodes(values.productCodes);
                            
                            if (values.expectedQuantity > 0) {
                                if (values.expectedQuantity === productCodesList.length) {
                                    hasValidBox = true;
                                } else {
                                    allQuantitiesMatch = false;
                                }
                            } else if (productCodesList.length > 0) {
                                hasValidBox = true;
                            }
                        } else {
                            // C√≥ d·ªØ li·ªáu nh∆∞ng kh√¥ng ƒë·∫ßy ƒë·ªß
                            if (!values.dateValue) allDatesValid = false;
                            if (!values.boxCode || !values.productCodes) {
                                // Kh√¥ng ƒë·ªß th√¥ng tin c∆° b·∫£n ƒë·ªÉ coi l√† valid
                            }
                        }
                    }
                    
                    this.updateBoxDisplay(index);
                });

                // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu g√¨ ho·∫∑c kh√¥ng c√≥ box n√†o valid
                if (!hasAnyBox) {
                    hasValidBox = false;
                }
                
                this.state[this.conditions.BOXES] = hasValidBox;
                this.state[this.conditions.ALL_DATES] = allDatesValid;
                this.state[this.conditions.QUANTITIES] = allQuantitiesMatch;
                
                return { hasValidBox, allQuantitiesMatch, allDatesValid };
            },

            async checkDuplicates() {
                const rows = document.querySelectorAll('#import_check_boxes_table tbody tr');
                let hasDuplicates = false;
                let duplicateDetails = [];
                let duplicateRowIndices = new Set();
                
                // Clear previous highlighting
                this.clearAllDuplicateHighlighting();
                
                rows.forEach((row, index) => {
                    const inputs = this.getRowInputs(row);
                    if (!inputs.all) return;

                    const values = this.getRowValues(inputs);
                    
                    // Check duplicate box codes
                    if (values.boxCode) {
                        const duplicateBoxes = this.findDuplicateBoxCodes(index, [values.boxCode]);
                        if (duplicateBoxes.length > 0) {
                            hasDuplicates = true;
                            this.markFieldError(inputs.boxCode);
                            
                            // T√¨m c√°c d√≤ng kh√°c c√≥ c√πng m√£ th√πng
                            const conflictRows = this.findRowsWithBoxCode(values.boxCode, index);
                            
                            // Highlight current row v√† conflict rows
                            duplicateRowIndices.add(index);
                            conflictRows.forEach(rowNum => duplicateRowIndices.add(rowNum - 1));
                            
                            duplicateDetails.push({
                                type: 'box',
                                code: values.boxCode,
                                currentRow: index + 1,
                                conflictRows: conflictRows,
                                message: `M√£ th√πng "${values.boxCode}" b·ªã tr√πng`
                            });
                        } else {
                            this.clearFieldError(inputs.boxCode);
                        }
                    }
                    
                    // Check duplicate product codes
                    if (values.productCodes) {
                        const productCodesList = this.parseProductCodes(values.productCodes);
                        
                        // Check internal duplicates (trong c√πng 1 d√≤ng)
                        const internalDups = this.findInternalDuplicates(productCodesList);
                        
                        // Check external duplicates (v·ªõi c√°c d√≤ng kh√°c)
                        const externalDups = this.findDuplicateProductCodes(index, productCodesList);
                        
                        if (internalDups.length > 0) {
                            hasDuplicates = true;
                            this.markFieldError(inputs.productCodes, '#ffeaa7');
                            
                            // Highlight current row
                            duplicateRowIndices.add(index);
                            
                            duplicateDetails.push({
                                type: 'product_internal',
                                codes: internalDups,
                                currentRow: index + 1,
                                message: `M√£ s·∫£n ph·∫©m tr√πng l·∫∑p trong c√πng d√≤ng ${index + 1}: ${internalDups.join(', ')}`
                            });
                        }
                        
                        if (externalDups.length > 0) {
                            hasDuplicates = true;
                            this.markFieldError(inputs.productCodes, '#ffeaa7');
                            
                            // T√¨m c√°c d√≤ng kh√°c c√≥ c√πng m√£ s·∫£n ph·∫©m
                            const productConflicts = this.findRowsWithProductCodes(externalDups, index);
                            
                            // Highlight current row v√† conflict rows
                            duplicateRowIndices.add(index);
                            Object.values(productConflicts).forEach(conflictRows => {
                                conflictRows.forEach(rowNum => duplicateRowIndices.add(rowNum - 1));
                            });
                            
                            externalDups.forEach(code => {
                                const conflictRows = productConflicts[code] || [];
                                duplicateDetails.push({
                                    type: 'product_external',
                                    code: code,
                                    currentRow: index + 1,
                                    conflictRows: conflictRows,
                                    message: `M√£ s·∫£n ph·∫©m "${code}" b·ªã tr√πng`
                                });
                            });
                        }
                        
                        if (internalDups.length === 0 && externalDups.length === 0) {
                            this.clearFieldError(inputs.productCodes);
                        }
                    }
                });
                
                // Highlight t·∫•t c·∫£ c√°c d√≤ng b·ªã tr√πng
                this.highlightDuplicateRows(Array.from(duplicateRowIndices));
                
                this.state[this.conditions.NO_DUPLICATES] = !hasDuplicates;
                
                // Hi·ªÉn th·ªã chi ti·∫øt l·ªói tr√πng l·∫∑p
                if (hasDuplicates && duplicateDetails.length > 0) {
                    this.showDuplicateDetails(duplicateDetails);
                }
                
                return !hasDuplicates;
            },

            clearAllDuplicateHighlighting() {
                const rows = document.querySelectorAll('#import_check_boxes_table tbody tr');
                rows.forEach(row => {
                    row.classList.remove('duplicate-row');
                });
            },

            highlightDuplicateRows(rowIndices) {
                const rows = document.querySelectorAll('#import_check_boxes_table tbody tr');
                
                rowIndices.forEach(index => {
                    if (rows[index]) {
                        rows[index].classList.add('duplicate-row');
                        
                        // Scroll to first duplicate row ƒë·ªÉ user d·ªÖ th·∫•y
                        if (index === Math.min(...rowIndices)) {
                            setTimeout(() => {
                                rows[index].scrollIntoView({ 
                                    behavior: 'smooth', 
                                    block: 'center' 
                                });
                            }, 500);
                        }
                    }
                });
            },

            findRowsWithBoxCode(boxCode, excludeIndex) {
                const conflictRows = [];
                const rows = document.querySelectorAll('#import_check_boxes_table tbody tr');
                
                rows.forEach((row, index) => {
                    if (index === excludeIndex) return;
                    
                    const input = row.querySelector('input[name*="[box_code]"]');
                    if (input && input.value.trim() === boxCode) {
                        conflictRows.push(index + 1);
                    }
                });
                
                return conflictRows;
            },

            findRowsWithProductCodes(productCodes, excludeIndex) {
                const conflicts = {};
                const rows = document.querySelectorAll('#import_check_boxes_table tbody tr');
                
                // Initialize conflicts object
                productCodes.forEach(code => {
                    conflicts[code] = [];
                });
                
                rows.forEach((row, index) => {
                    if (index === excludeIndex) return;
                    
                    const input = row.querySelector('textarea[name*="[product_codes]"]');
                    if (input && input.value.trim()) {
                        const otherCodes = this.parseProductCodes(input.value.trim());
                        
                        productCodes.forEach(code => {
                            if (otherCodes.includes(code)) {
                                conflicts[code].push(index + 1);
                            }
                        });
                    }
                });
                
                return conflicts;
            },

            showDuplicateDetails(duplicateDetails) {
                let detailMessage = '‚ùå Chi ti·∫øt m√£ tr√πng l·∫∑p:<br><br>';
                
                // Nh√≥m l·ªói theo lo·∫°i
                const boxDuplicates = duplicateDetails.filter(d => d.type === 'box');
                const productInternalDuplicates = duplicateDetails.filter(d => d.type === 'product_internal');
                const productExternalDuplicates = duplicateDetails.filter(d => d.type === 'product_external');
                
                // Hi·ªÉn th·ªã l·ªói m√£ th√πng tr√πng
                if (boxDuplicates.length > 0) {
                    detailMessage += '<div style="margin-bottom: 15px; padding: 10px; background: #fff3cd; border-left: 3px solid #ffc107; border-radius: 3px;">';
                    detailMessage += '<strong>üóÇÔ∏è M√£ th√πng tr√πng l·∫∑p:</strong><br>';
                    
                    // Group by box code
                    const groupedBoxes = {};
                    boxDuplicates.forEach(dup => {
                        if (!groupedBoxes[dup.code]) {
                            groupedBoxes[dup.code] = [];
                        }
                        groupedBoxes[dup.code].push(dup.currentRow);
                        groupedBoxes[dup.code].push(...dup.conflictRows);
                    });
                    
                    Object.entries(groupedBoxes).forEach(([boxCode, rows]) => {
                        const uniqueRows = [...new Set(rows)].sort((a, b) => a - b);
                        detailMessage += `<small>‚Ä¢ M√£ th√πng "<strong>${boxCode}</strong>" xu·∫•t hi·ªán ·ªü d√≤ng: ${uniqueRows.join(', ')}</small><br>`;
                    });
                    
                    detailMessage += '</div>';
                }
                
                // Hi·ªÉn th·ªã l·ªói m√£ s·∫£n ph·∫©m tr√πng trong c√πng d√≤ng
                if (productInternalDuplicates.length > 0) {
                    detailMessage += '<div style="margin-bottom: 15px; padding: 10px; background: #f8d7da; border-left: 3px solid #dc3545; border-radius: 3px;">';
                    detailMessage += '<strong>üîÑ M√£ s·∫£n ph·∫©m tr√πng l·∫∑p trong c√πng d√≤ng:</strong><br>';
                    
                    productInternalDuplicates.forEach(dup => {
                        detailMessage += `<small>‚Ä¢ <span style="color: #e74c3c; font-weight: bold;">D√≤ng ${dup.currentRow}</span>: ${dup.codes.join(', ')}</small><br>`;
                    });
                    
                    detailMessage += '</div>';
                }
                
                // Hi·ªÉn th·ªã l·ªói m√£ s·∫£n ph·∫©m tr√πng gi·ªØa c√°c d√≤ng
                if (productExternalDuplicates.length > 0) {
                    detailMessage += '<div style="margin-bottom: 15px; padding: 10px; background: #f8d7da; border-left: 3px solid #dc3545; border-radius: 3px;">';
                    detailMessage += '<strong>‚ÜîÔ∏è M√£ s·∫£n ph·∫©m tr√πng l·∫∑p gi·ªØa c√°c d√≤ng:</strong><br>';
                    
                    // Group by product code
                    const groupedProducts = {};
                    productExternalDuplicates.forEach(dup => {
                        if (!groupedProducts[dup.code]) {
                            groupedProducts[dup.code] = [];
                        }
                        groupedProducts[dup.code].push(dup.currentRow);
                        groupedProducts[dup.code].push(...dup.conflictRows);
                    });
                    
                    Object.entries(groupedProducts).forEach(([productCode, rows]) => {
                        const uniqueRows = [...new Set(rows)].sort((a, b) => a - b);
                        detailMessage += `<small>‚Ä¢ M√£ s·∫£n ph·∫©m "<strong>${productCode}</strong>" xu·∫•t hi·ªán ·ªü <span style="color: #e74c3c; font-weight: bold;">d√≤ng: ${uniqueRows.join(', ')}</span></small><br>`;
                    });
                    
                    detailMessage += '</div>';
                }
                detailMessage += '<p style="color: #666; font-style: italic; margin-top: 10px;">üí° C√°c d√≤ng b·ªã tr√πng ƒë√£ ƒë∆∞·ª£c t√¥ ƒë·ªè trong b·∫£ng ƒë·ªÉ d·ªÖ nh·∫≠n bi·∫øt.</p>';
                // Update step v·ªõi th√¥ng tin chi ti·∫øt
                const progressDiv = document.getElementById('check-progress');
                if (progressDiv && progressDiv.lastElementChild) {
                    progressDiv.lastElementChild.innerHTML = detailMessage;
                }
            },

            async checkDatabase() {
                const rows = document.querySelectorAll('#import_check_boxes_table tbody tr');
                let allValid = true;
                let invalidDetails = [];
                let hasAnyDataToCheck = false;
                
                for (let i = 0; i < rows.length; i++) {
                    const inputs = this.getRowInputs(rows[i]);
                    if (!inputs.all) continue;

                    const values = this.getRowValues(inputs);
                    
                    // Ki·ªÉm tra n·∫øu c√≥ b·∫•t k·ª≥ d·ªØ li·ªáu n√†o ƒë·ªÉ validate
                    const hasData = values.boxCode || values.productCodes || values.expectedQuantity > 0 || values.dateValue;
                    
                    if (!hasData) {
                        // Row tr·ªëng ho√†n to√†n - clear t·∫•t c·∫£ styling
                        this.clearAllFieldStyling(inputs);
                        continue;
                    }
                    
                    hasAnyDataToCheck = true;
                    let rowErrors = [];
                    
                    try {
                        // ============ VALIDATE REQUIRED FIELDS ============
                        
                        // 1. Validate Box Code - Required
                        if (!values.boxCode) {
                            allValid = false;
                            inputs.boxCode.classList.add('required-field');
                            inputs.boxCode.classList.remove('valid-field', 'invalid-code');
                            rowErrors.push('thi·∫øu m√£ th√πng');
                        } else {
                            inputs.boxCode.classList.remove('required-field');
                            
                            // Check box code in database
                            const boxStatus = await this.apiCall('check_barcode_status', { type: 'box', codes: [values.boxCode] });
                            if (boxStatus[values.boxCode]) {
                                const status = boxStatus[values.boxCode];
                                this.cache.boxes[values.boxCode] = status;
                                
                                if (!status.exists) {
                                    allValid = false;
                                    inputs.boxCode.classList.add('invalid-code');
                                    inputs.boxCode.classList.remove('valid-field');
                                    rowErrors.push(`m√£ th√πng "${values.boxCode}" kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng`);
                                } else if (status.status !== 'unused') {
                                    allValid = false;
                                    inputs.boxCode.classList.add('invalid-code');
                                    inputs.boxCode.classList.remove('valid-field');
                                    rowErrors.push(`m√£ th√πng "${values.boxCode}" ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng (tr·∫°ng th√°i: ${status.status})`);
                                } else {
                                    inputs.boxCode.classList.add('valid-field');
                                    inputs.boxCode.classList.remove('invalid-code');
                                }
                            } else {
                                allValid = false;
                                inputs.boxCode.classList.add('invalid-code');
                                inputs.boxCode.classList.remove('valid-field');
                                rowErrors.push(`kh√¥ng th·ªÉ ki·ªÉm tra m√£ th√πng "${values.boxCode}"`);
                            }
                        }
                        
                        // 2. Validate Product Codes - Required
                        if (!values.productCodes) {
                            allValid = false;
                            inputs.productCodes.classList.add('required-field');
                            inputs.productCodes.classList.remove('valid-field', 'invalid-code', 'assigned-to-box');
                            rowErrors.push('thi·∫øu danh s√°ch m√£ s·∫£n ph·∫©m');
                        } else {
                            inputs.productCodes.classList.remove('required-field');
                            
                            const productCodesList = this.parseProductCodes(values.productCodes);
                            if (productCodesList.length === 0) {
                                allValid = false;
                                inputs.productCodes.classList.add('required-field');
                                inputs.productCodes.classList.remove('valid-field', 'invalid-code', 'assigned-to-box');
                                rowErrors.push('danh s√°ch m√£ s·∫£n ph·∫©m tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá');
                            } else {
                                // Check product codes in database
                                const productStatus = await this.apiCall('check_barcode_status', { type: 'product', codes: productCodesList });
                                let invalidProducts = [];
                                let missingProducts = [];
                                let usedProducts = [];
                                
                                for (const code of productCodesList) {
                                    if (productStatus[code]) {
                                        const status = productStatus[code];
                                        this.cache.products[code] = status;
                                        
                                        if (!status.exists) {
                                            missingProducts.push(code);
                                        } else if (status.status !== 'unused') {
                                            usedProducts.push(`${code} (${status.status})`);
                                        }
                                    } else {
                                        invalidProducts.push(code);
                                    }
                                }
                                
                                // T·ªïng h·ª£p l·ªói product codes
                                let productErrors = [];
                                if (missingProducts.length > 0) {
                                    productErrors.push(`kh√¥ng t·ªìn t·∫°i: ${missingProducts.join(', ')}`);
                                }
                                if (usedProducts.length > 0) {
                                    productErrors.push(`ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng: ${usedProducts.join(', ')}`);
                                }
                                if (invalidProducts.length > 0) {
                                    productErrors.push(`kh√¥ng th·ªÉ ki·ªÉm tra: ${invalidProducts.join(', ')}`);
                                }
                                
                                if (productErrors.length > 0) {
                                    allValid = false;
                                    inputs.productCodes.classList.add('invalid-code');
                                    inputs.productCodes.classList.remove('valid-field');
                                    rowErrors.push(`m√£ s·∫£n ph·∫©m ${productErrors.join('; ')}`);
                                } else {
                                    inputs.productCodes.classList.add('valid-field');
                                    inputs.productCodes.classList.remove('invalid-code');
                                }
                            }
                        }
                        
                        // 3. Validate Date - Required  
                        if (!values.dateValue) {
                            allValid = false;
                            inputs.date.classList.add('required-field');
                            inputs.date.classList.remove('valid-field');
                            rowErrors.push('thi·∫øu Date');
                        } else {
                            // Validate date format (optional - c√≥ th·ªÉ th√™m regex validation)
                            const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
                            if (!dateRegex.test(values.dateValue)) {
                                allValid = false;
                                inputs.date.classList.add('required-field');
                                inputs.date.classList.remove('valid-field');
                                rowErrors.push('Date kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng (YYYY-MM-DD)');
                            } else {
                                inputs.date.classList.add('valid-field');
                                inputs.date.classList.remove('required-field');
                            }
                        }
                        
                        // 4. Validate Product Quantity vs Actual Quantity
                        if (values.productCodes) {
                            const productCodesList = this.parseProductCodes(values.productCodes);
                            const actualQuantity = productCodesList.length;
                            
                            if (values.expectedQuantity > 0) {
                                if (values.expectedQuantity !== actualQuantity) {
                                    allValid = false;
                                    inputs.quantity.classList.add('required-field');
                                    inputs.quantity.classList.remove('valid-field');
                                    rowErrors.push(`s·ªë l∆∞·ª£ng kh√¥ng kh·ªõp (d·ª± ki·∫øn: ${values.expectedQuantity}, th·ª±c t·∫ø: ${actualQuantity})`);
                                } else {
                                    inputs.quantity.classList.add('valid-field');
                                    inputs.quantity.classList.remove('required-field');
                                }
                            } else {
                                // N·∫øu kh√¥ng nh·∫≠p s·ªë l∆∞·ª£ng d·ª± ki·∫øn, c·∫£nh b√°o
                                inputs.quantity.classList.add('required-field');
                                inputs.quantity.classList.remove('valid-field');
                                rowErrors.push(`ch∆∞a nh·∫≠p s·ªë l∆∞·ª£ng d·ª± ki·∫øn (hi·ªán c√≥ ${actualQuantity} m√£)`);
                                allValid = false;
                            }
                        }
                        
                        // ============ VALIDATE BUSINESS RULES ============
                        
                        // 5. Validate complete row data
                        if (values.boxCode && values.productCodes && values.dateValue && values.expectedQuantity > 0) {
                            const productCodesList = this.parseProductCodes(values.productCodes);
                            
                            // Check if box code and product codes are consistent
                            if (productCodesList.length === 0) {
                                allValid = false;
                                rowErrors.push('m√£ s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá sau khi parse');
                            }
                            
                            // Additional business rule checks can be added here
                            // Example: Check if box capacity matches product count
                            // Example: Check if date is within valid range
                        }
                        
                        // L∆∞u l·ªói c·ªßa d√≤ng n√†y n·∫øu c√≥
                        if (rowErrors.length > 0) {
                            invalidDetails.push({
                                row: i + 1,
                                errors: rowErrors,
                                data: {
                                    boxCode: values.boxCode || '(tr·ªëng)',
                                    productCount: values.productCodes ? this.parseProductCodes(values.productCodes).length : 0,
                                    expectedQuantity: values.expectedQuantity,
                                    date: values.dateValue || '(tr·ªëng)'
                                }
                            });
                        }
                        
                    } catch (error) {
                        console.error(`Database check error at row ${i + 1}:`, error);
                        allValid = false;
                        
                        // Clear all styling on error
                        this.clearAllFieldStyling(inputs);
                        
                        invalidDetails.push({
                            row: i + 1,
                            errors: [`l·ªói k·∫øt n·ªëi database: ${error.message || 'Unknown error'}`],
                            data: { error: true }
                        });
                    }
                    
                    // Update display for this row
                    this.updateBoxDisplay(i);
                }
                
                // ============ FINAL VALIDATION ============
                
                // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë·ªÉ check
                if (!hasAnyDataToCheck) {
                    allValid = false;
                    invalidDetails.push({
                        row: 'T·ªïng quan',
                        errors: ['Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë·ªÉ ki·ªÉm tra - c·∫ßn √≠t nh·∫•t 1 th√πng h√†ng'],
                        data: { global: true }
                    });
                }
                
                // ============ DISPLAY DETAILED ERRORS ============
                
                if (invalidDetails.length > 0) {
                    let detailMessage = '‚ùå Chi ti·∫øt l·ªói ki·ªÉm tra c∆° s·ªü d·ªØ li·ªáu:<br><br>';
                    
                    invalidDetails.forEach(detail => {
                        if (detail.data.global) {
                            detailMessage += `<div style="margin-bottom: 10px; padding: 8px; background: #fff3cd; border-left: 3px solid #ffc107; border-radius: 3px;">`;
                            detailMessage += `<strong>${detail.row}:</strong><br>`;
                        } else if (detail.data.error) {
                            detailMessage += `<div style="margin-bottom: 10px; padding: 8px; background: #f8d7da; border-left: 3px solid #dc3545; border-radius: 3px;">`;
                            detailMessage += `<strong>D√≤ng ${detail.row}:</strong> L·ªói h·ªá th·ªëng<br>`;
                        } else {
                            detailMessage += `<div style="margin-bottom: 10px; padding: 8px; background: #f8d7da; border-left: 3px solid #dc3545; border-radius: 3px;">`;
                            detailMessage += `<strong>D√≤ng ${detail.row}:</strong> ${detail.data.boxCode} | ${detail.data.productCount} m√£ | SL: ${detail.data.expectedQuantity} | ${detail.data.date}<br>`;
                        }
                        
                        detail.errors.forEach(error => {
                            detailMessage += `<small style="color: #721c24;">‚Ä¢ ${error}</small><br>`;
                        });
                        
                        detailMessage += `</div>`;
                    });
                    
                    // Update step v·ªõi th√¥ng tin chi ti·∫øt
                    const progressDiv = document.getElementById('check-progress');
                    if (progressDiv && progressDiv.lastElementChild) {
                        progressDiv.lastElementChild.innerHTML = detailMessage;
                    }
                }
                
                return allValid;
            },

            clearAllFieldStyling(inputs) {
                const fields = [inputs.boxCode, inputs.productCodes, inputs.date, inputs.quantity];
                const classes = ['required-field', 'valid-field', 'invalid-code', 'assigned-to-box'];
                
                fields.forEach(field => {
                    if (field) {
                        classes.forEach(cls => field.classList.remove(cls));
                    }
                });
            },

            async checkProductAssignment() {
                const allProductCodes = this.getAllProductCodes();
                if (allProductCodes.length === 0) return true;
                
                try {
                    const assignmentStatus = await this.apiCall('check_product_box_assignment', { product_codes: allProductCodes });
                    let allNotAssigned = true;
                    let assignedProductsDetails = []; // Th√™m array ƒë·ªÉ l∆∞u chi ti·∫øt
                    
                    document.querySelectorAll('#import_check_boxes_table tbody tr').forEach((row, index) => {
                        const inputs = this.getRowInputs(row);
                        if (!inputs.productCodes) return;
                        
                        const productCodesList = this.parseProductCodes(inputs.productCodes.value.trim());
                        let hasAssigned = false;
                        
                        for (const code of productCodesList) {
                            if (assignmentStatus[code] && assignmentStatus[code].assigned) {
                                hasAssigned = true;
                                allNotAssigned = false;
                                this.cache.productAssignments[code] = assignmentStatus[code];
                                // L∆∞u chi ti·∫øt m√£ ƒë√£ b·ªã ph√¢n b·ªï
                                assignedProductsDetails.push({
                                    code: code,
                                    assignedToBox: assignmentStatus[code].box_barcode,
                                    rowIndex: index + 1
                                });
                            }
                        }
                        
                        if (hasAssigned) inputs.productCodes.classList.add('assigned-to-box');
                        else inputs.productCodes.classList.remove('assigned-to-box');
                        
                        this.updateBoxDisplay(index);
                    });
                    
                    // C·∫≠p nh·∫≠t step v·ªõi th√¥ng tin chi ti·∫øt
                    if (assignedProductsDetails.length > 0) {
                        // Nh√≥m theo th√πng ƒë·ªÉ hi·ªÉn th·ªã g·ªçn h∆°n
                        const groupedByBox = {};
                        assignedProductsDetails.forEach(item => {
                            if (!groupedByBox[item.assignedToBox]) {
                                groupedByBox[item.assignedToBox] = [];
                            }
                            groupedByBox[item.assignedToBox].push(`${item.code} (d√≤ng ${item.rowIndex})`);
                        });
                        
                        let detailMessage = '‚ùå C√≥ m√£ s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c ph√¢n b·ªï v√†o th√πng kh√°c:<br>';
                        Object.entries(groupedByBox).forEach(([boxCode, codes]) => {
                            detailMessage += `<small style="color: #ff6b35;">‚Ä¢ Th√πng <strong>${boxCode}</strong>: ${codes.join(', ')}</small><br>`;
                        });
                        
                        // Update step v·ªõi th√¥ng tin chi ti·∫øt
                        const progressDiv = document.getElementById('check-progress');
                        if (progressDiv && progressDiv.lastElementChild) {
                            progressDiv.lastElementChild.innerHTML = detailMessage;
                        }
                    }
                    
                    return allNotAssigned;
                } catch (error) {
                    console.error('Assignment check error:', error);
                    return false;
                }
            },

            // ============ HELPER METHODS ============
            getRowInputs(row) {
                const boxCode = row.querySelector('input[name*="[box_code]"]');
                const quantity = row.querySelector('input[name*="[product_quantity]"]');
                const productCodes = row.querySelector('textarea[name*="[product_codes]"]');
                const date = row.querySelector('input[name*="[lot_date]"]');
                return { boxCode, quantity, productCodes, date, all: boxCode && quantity && productCodes && date };
            },

            getRowValues(inputs) {
                return {
                    boxCode: inputs.boxCode ? inputs.boxCode.value.trim() : '',
                    expectedQuantity: inputs.quantity ? parseInt(inputs.quantity.value) || 0 : 0,
                    productCodes: inputs.productCodes ? inputs.productCodes.value.trim() : '',
                    dateValue: inputs.date ? inputs.date.value.trim() : ''
                };
            },

            parseProductCodes(productCodes) {
                return productCodes.split(/[\n,;]+/).map(code => code.trim()).filter(code => code);
            },

            getAllProductCodes() {
                const allCodes = [];
                document.querySelectorAll('#import_check_boxes_table tbody tr').forEach(row => {
                    const input = row.querySelector('textarea[name*="[product_codes]"]');
                    if (input && input.value.trim()) {
                        allCodes.push(...this.parseProductCodes(input.value.trim()));
                    }
                });
                return [...new Set(allCodes)];
            },

            findInternalDuplicates(codes) {
                const seen = {}, duplicates = [];
                codes.forEach(code => {
                    if (seen[code]) { if (!duplicates.includes(code)) duplicates.push(code); }
                    else seen[code] = true;
                });
                return duplicates;
            },

            findDuplicateBoxCodes(currentIndex, currentCodes) {
                const duplicates = [];
                document.querySelectorAll('#import_check_boxes_table tbody tr').forEach((row, index) => {
                    if (index === currentIndex) return;
                    const input = row.querySelector('input[name*="[box_code]"]');
                    if (input) {
                        const otherCode = input.value.trim();
                        currentCodes.forEach(code => { if (code && otherCode === code) duplicates.push(code); });
                    }
                });
                return [...new Set(duplicates)];
            },

            findDuplicateProductCodes(currentIndex, currentCodes) {
                const duplicates = [];
                document.querySelectorAll('#import_check_boxes_table tbody tr').forEach((row, index) => {
                    if (index === currentIndex) return;
                    const input = row.querySelector('textarea[name*="[product_codes]"]');
                    if (input && input.value.trim()) {
                        const otherCodes = this.parseProductCodes(input.value.trim());
                        currentCodes.forEach(code => { if (otherCodes.includes(code)) duplicates.push(code); });
                    }
                });
                return [...new Set(duplicates)];
            },

            markFieldError(field, bgColor = '#ffe6e6') {
                field.style.borderColor = '#e74c3c';
                field.style.backgroundColor = bgColor;
            },

            clearFieldError(field) {
                field.style.borderColor = '';
                field.style.backgroundColor = '';
            },

            updateBoxDisplay(index) {
                const inputs = this.getRowInputs(document.querySelectorAll('#import_check_boxes_table tbody tr')[index]);
                if (!inputs.all) return;

                const values = this.getRowValues(inputs);
                const productCodesList = this.parseProductCodes(values.productCodes);
                const actualQuantity = productCodesList.length;
                
                const statusDiv = document.getElementById(`box_status_${index}`);
                const messageDiv = document.getElementById(`box_message_${index}`);
                if (!statusDiv || !messageDiv) return;

                let messages = [];

                // Quantity check
                if (values.expectedQuantity > 0 || actualQuantity > 0) {
                    if (values.expectedQuantity === actualQuantity && values.expectedQuantity > 0) {
                        messages.push('<span style="color: green;">‚úÖ S·ªë l∆∞·ª£ng kh·ªõp (' + actualQuantity + ' m√£)</span>');
                    } else {
                        messages.push('<span style="color: red;">‚ùå S·ªë l∆∞·ª£ng kh√¥ng kh·ªõp</span><br><small>D·ª± ki·∫øn: ' + values.expectedQuantity + ' | Th·ª±c t·∫ø: ' + actualQuantity + '</small>');
                    }
                }

                // Date check
                messages.push(values.dateValue ? 
                    '<span style="color: #28a745;">‚úÖ Date h·ª£p l·ªá</span>' : 
                    '<span style="color: #e74c3c;">‚ö†Ô∏è Date l√† b·∫Øt bu·ªôc</span>');

                // Database status
                if (values.boxCode && this.cache.boxes[values.boxCode]) {
                    const status = this.cache.boxes[values.boxCode];
                    if (!status.exists) messages.push('<span style="color: #e74c3c;">‚ùå M√£ th√πng kh√¥ng t·ªìn t·∫°i</span>');
                    else if (status.status !== 'unused') messages.push('<span style="color: #e74c3c;">‚ùå M√£ th√πng ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng</span>');
                    else messages.push('<span style="color: #28a745;">‚úÖ M√£ th√πng h·ª£p l·ªá</span>');
                }

                // Assignment check
                if (values.productCodes) {
                    const assignedProducts = productCodesList.filter(code => 
                        this.cache.productAssignments[code] && this.cache.productAssignments[code].assigned
                    );
                    
                    if (assignedProducts.length > 0) {
                        messages.push('<span style="color: #ff6b35;">üö´ C√≥ m√£ ƒë√£ thu·ªôc th√πng kh√°c:</span>');
                        assignedProducts.forEach(code => {
                            const info = this.cache.productAssignments[code];
                            messages.push(`<small style="color: #ff6b35;">‚Ä¢ ${code} (thu·ªôc th√πng: ${info.box_barcode})</small>`);
                        });
                    } else if (productCodesList.length > 0) {
                        const allChecked = productCodesList.every(code => this.cache.productAssignments.hasOwnProperty(code));
                        if (allChecked) messages.push('<span style="color: #28a745;">‚úÖ T·∫•t c·∫£ m√£ ch∆∞a thu·ªôc th√πng n√†o</span>');
                    }
                }

                // Status
                let status;
                if (values.boxCode && values.productCodes && values.dateValue) {
                    status = values.expectedQuantity === actualQuantity ? 
                        '<span style="color: green;">‚úÖ Ho√†n th√†nh</span>' : 
                        '<span style="color: #e74c3c;">‚ùå C√≥ l·ªói c·∫ßn s·ª≠a</span>';
                } else {
                    const missing = [];
                    if (!values.boxCode) missing.push('m√£ th√πng');
                    if (!values.productCodes) missing.push('m√£ s·∫£n ph·∫©m');
                    if (!values.dateValue) missing.push('date');
                    status = '<span style="color: orange;">‚ö†Ô∏è Ch∆∞a nh·∫≠p: ' + missing.join(', ') + '</span>';
                }

                statusDiv.innerHTML = status;
                messageDiv.innerHTML = messages.join('<br>') || '<em style="color: #666;">Nh·∫≠p th√¥ng tin ƒë·ªÉ ki·ªÉm tra</em>';
            },

            updateStats() {
                const rows = document.querySelectorAll('#import_check_boxes_table tbody tr');
                let totalBoxes = 0, totalActualCodes = 0, totalExpectedCodes = 0, validBoxes = 0;

                rows.forEach(row => {
                    const inputs = this.getRowInputs(row);
                    if (!inputs.all) return;

                    const values = this.getRowValues(inputs);
                    if (values.boxCode || values.expectedQuantity > 0 || values.productCodes) {
                        totalBoxes++;
                        totalExpectedCodes += values.expectedQuantity;

                        if (values.productCodes) {
                            totalActualCodes += this.parseProductCodes(values.productCodes).length;
                        }

                        const hasValidInfo = values.boxCode && values.productCodes && values.dateValue && values.expectedQuantity > 0;
                        const quantityMatch = values.expectedQuantity > 0 && values.productCodes && 
                                            values.expectedQuantity === this.parseProductCodes(values.productCodes).length;
                        
                        if (hasValidInfo && quantityMatch) validBoxes++;
                    }
                });

                document.getElementById('total-boxes').textContent = totalBoxes;
                document.getElementById('total-codes').textContent = totalActualCodes;
                document.getElementById('expected-codes').textContent = totalExpectedCodes;

                const matchStatusElement = document.getElementById('match-status');
                if (totalBoxes === 0) {
                    matchStatusElement.textContent = '-';
                    matchStatusElement.style.color = '#666';
                } else if (validBoxes === totalBoxes && totalActualCodes === totalExpectedCodes) {
                    matchStatusElement.textContent = '100%';
                    matchStatusElement.style.color = '#28a745';
                } else {
                    const percentage = totalBoxes > 0 ? Math.round((validBoxes / totalBoxes) * 100) : 0;
                    matchStatusElement.textContent = percentage + '%';
                    matchStatusElement.style.color = percentage < 100 ? '#dc3545' : '#28a745';
                }
            },

            updateSummary() {
                const summaryElement = document.getElementById('validation-summary');
                const invalidConditions = this.getInvalidConditions();
                
                if (invalidConditions.length === 0) {
                    summaryElement.className = 'validation-summary success';
                    summaryElement.innerHTML = '<h4>‚úÖ S·∫µn s√†ng c·∫≠p nh·∫≠t</h4><p>T·∫•t c·∫£ th√¥ng tin b·∫Øt bu·ªôc ƒë√£ ƒë∆∞·ª£c nh·∫≠p ƒë·∫ßy ƒë·ªß v√† h·ª£p l·ªá.</p>';
                } else {
                    summaryElement.className = 'validation-summary error';
                    summaryElement.innerHTML = `<h4>‚ö†Ô∏è C·∫ßn nh·∫≠p th√™m th√¥ng tin ƒë·ªÉ c√≥ th·ªÉ c·∫≠p nh·∫≠t</h4><ul>${invalidConditions.map(condition => `<li>${condition}</li>`).join('')}</ul>`;
                }
            },

            // ============ SUBMIT BUTTON CONTROL ============
            disableSubmitButtons() {
                this.toggleSubmitButtons(true);
            },

            enableSubmitButtons() {
                this.toggleSubmitButtons(false);
            },

            toggleSubmitButtons(disable) {
                const selectors = ['#publish', '#save-post', 'input[name="publish"]', 'input[name="save"]', 
                                '.editor-post-publish-button', '#publishing-action input[type="submit"]',
                                '#publishing-action .button-primary', '#submitdiv input[type="submit"]', '.button-primary[type="submit"]'];
                
                document.querySelectorAll(selectors.join(',')).forEach(button => {
                    button.disabled = disable;
                    button.classList.toggle('submit-button-disabled', disable);
                    button.title = disable ? 'Vui l√≤ng ki·ªÉm tra v√† s·ª≠a l·ªói tr∆∞·ªõc khi c·∫≠p nh·∫≠t' : 'C√≥ th·ªÉ c·∫≠p nh·∫≠t';
                });
            },

            // ============ EVENT LISTENERS ============
            setupEventListeners() {
                // Main check button
                document.getElementById('check_all_validations').addEventListener('click', async (e) => {
                    await this.checkAll();
                });

                // Add box row
                document.getElementById('add_box_row').addEventListener('click', () => {
                    const tableBody = document.querySelector('#import_check_boxes_table tbody');
                    const row = document.createElement('tr');
                    row.innerHTML = `<?php echo str_replace(["\n", "'"], ["", "\\'"], render_import_box_row()); ?>`.replace(/__index__/g, this.boxRowIndex);
                    tableBody.appendChild(row);
                    this.initBoxRowEventListeners(this.boxRowIndex);
                    this.boxRowIndex++;
                    this.updateStats();
                });

                // Remove box row
                document.addEventListener('click', (e) => {
                    if (e.target.classList.contains('remove-box-row')) {
                        e.target.closest('tr').remove();
                        this.updateStats();
                    }
                });

                // Form validation
                ['title', 'import_date'].forEach(fieldId => {
                    const input = document.getElementById(fieldId);
                    if (input) {
                        input.addEventListener(fieldId === 'title' ? 'input' : 'change', () => {
                            this.validateField(fieldId);
                            this.updateSummary();
                        });
                    }
                });

                // Form submit prevention
                this.setupSubmitPrevention();

                // Initialize existing rows
                document.querySelectorAll('#import_check_boxes_table tbody tr').forEach((row, index) => {
                    this.initBoxRowEventListeners(index);
                });

                // Submit button observer
                this.setupSubmitButtonObserver();
            },

            initBoxRowEventListeners(index) {
                const selectors = [
                    { name: 'product_codes', event: 'input', clearCache: (val, oldVal) => {
                        // Clear cache cho t·∫•t c·∫£ codes c≈©
                        if (oldVal) {
                            const oldCodes = this.parseProductCodes(oldVal);
                            oldCodes.forEach(code => {
                                delete this.cache.products[code];
                                delete this.cache.productAssignments[code];
                            });
                        }
                        // Clear cache cho codes m·ªõi n·∫øu c√≥
                        if (val) {
                            const newCodes = this.parseProductCodes(val);
                            newCodes.forEach(code => {
                                delete this.cache.products[code];
                                delete this.cache.productAssignments[code];
                            });
                        }
                    }},
                    { name: 'box_code', event: 'input', clearCache: (val, oldVal) => {
                        if (oldVal) delete this.cache.boxes[oldVal.trim()];
                        if (val) delete this.cache.boxes[val.trim()];
                    }},
                    { name: 'product_quantity', event: 'input' },
                    { name: 'lot_date', event: 'change' }
                ];

                selectors.forEach(selector => {
                    const input = document.querySelector(`[name="import_check_boxes[${index}][${selector.name}]"]`);
                    if (input) {
                        let oldValue = input.value; // L∆∞u gi√° tr·ªã c≈©
                        
                        input.addEventListener(selector.event, () => {
                            if (selector.clearCache) {
                                selector.clearCache(input.value, oldValue);
                            }
                            oldValue = input.value; // C·∫≠p nh·∫≠t gi√° tr·ªã c≈©
                            
                            this.updateBoxDisplay(index);
                            this.updateStats();
                            
                            // Reset validation state khi c√≥ thay ƒë·ªïi
                            this.resetValidationState();
                        });
                    }
                });
            },

            resetValidationState() {
                // Reset validation state v·ªÅ false khi c√≥ thay ƒë·ªïi d·ªØ li·ªáu
                Object.keys(this.conditions).forEach(key => {
                    this.state[this.conditions[key]] = false;
                });
                
                // Clear duplicate highlighting
                this.clearAllDuplicateHighlighting();
                
                // Disable submit buttons
                this.disableSubmitButtons();
                
                // Update summary ƒë·ªÉ hi·ªÉn th·ªã c·∫ßn ki·ªÉm tra l·∫°i
                const summaryElement = document.getElementById('validation-summary');
                summaryElement.className = 'validation-summary error';
                summaryElement.innerHTML = `
                    <h4>‚ö†Ô∏è D·ªØ li·ªáu ƒë√£ thay ƒë·ªïi - C·∫ßn ki·ªÉm tra l·∫°i</h4>
                    <ul><li>‚ùå Vui l√≤ng b·∫•m "Ki·ªÉm tra t·∫•t c·∫£" ƒë·ªÉ validate d·ªØ li·ªáu m·ªõi</li></ul>
                `;
            },

            setupSubmitPrevention() {
                const form = document.getElementById('post');
                if (form) {
                    form.addEventListener('submit', (e) => {
                        const allValid = Object.values(this.state).every(v => v === true);
                        if (!allValid) {
                            e.preventDefault();
                            e.stopPropagation();
                            alert('‚ùå Vui l√≤ng click "Ki·ªÉm tra t·∫•t c·∫£" v√† s·ª≠a c√°c l·ªói tr∆∞·ªõc khi c·∫≠p nh·∫≠t!');
                            return false;
                        }
                    });
                }

                document.addEventListener('click', (e) => {
                    const isSubmitButton = e.target.matches(['#publish', '#save-post', 'input[name="publish"]', 
                        'input[name="save"]', '.editor-post-publish-button', '#publishing-action input[type="submit"]',
                        '#publishing-action .button-primary', '#submitdiv input[type="submit"]', '.button-primary[type="submit"]'].join(','));

                    if (isSubmitButton && e.target.disabled) {
                        e.preventDefault();
                        e.stopPropagation();
                        alert('‚ùå Vui l√≤ng click "Ki·ªÉm tra t·∫•t c·∫£" v√† s·ª≠a c√°c l·ªói tr∆∞·ªõc khi c·∫≠p nh·∫≠t!');
                        return false;
                    }
                }, true);
            },

            setupSubmitButtonObserver() {
                const observer = new MutationObserver((mutations) => {
                    mutations.forEach(mutation => {
                        if (mutation.addedNodes.length > 0) {
                            const hasSubmitButton = Array.from(mutation.addedNodes).some(node => {
                                return node.nodeType === 1 && node.matches && (
                                    node.matches('#publish') || node.matches('#save-post') ||
                                    node.matches('input[name="publish"]') || node.matches('input[name="save"]') ||
                                    node.matches('.button-primary[type="submit"]')
                                );
                            });
                            if (hasSubmitButton) setTimeout(() => this.disableSubmitButtons(), 100);
                        }
                    });
                });
                observer.observe(document.body, { childList: true, subtree: true });
            },

            // ============ API HELPER ============
            async apiCall(action, data) {
                return new Promise((resolve, reject) => {
                    jQuery.ajax({
                        url: ajax_url,
                        type: 'POST',
                        data: { action, ...data, nonce: check_barcode_nonce },
                        success: (response) => response.success ? resolve(response.data) : reject('API call failed'),
                        error: () => reject('Network error')
                    });
                });
            }
        };

        // ============ INITIALIZATION ============
        document.addEventListener('DOMContentLoaded', () => ValidationManager.init());
        if (document.readyState !== 'loading') ValidationManager.init();
    </script>
    <?php
}
function render_import_box_row($box_code = '', $product_quantity = '', $product_codes = '', $lot_date = '', $index = '__index__') {
    ob_start();
    ?>
    <tr>
        <td>
            <input type="text"
                name="import_check_boxes[<?php echo $index; ?>][box_code]"
                value="<?php echo esc_attr($box_code); ?>"
                placeholder="Nh·∫≠p m√£ th√πng"
                style="width: 150px;"
                title="M√£ ƒë·ªãnh danh th√πng (ph·∫£i t·ªìn t·∫°i trong DB v·ªõi status=unused)" />
            <span class="db-status-indicator" id="box_db_status_<?php echo $index; ?>"></span>
        </td>

        <td>
            <input type="number"
                name="import_check_boxes[<?php echo $index; ?>][product_quantity]"
                value="<?php echo esc_attr($product_quantity); ?>"
                min="1" 
                placeholder="S·ªë m√£"
                style="width: 80px;"
                title="S·ªë l∆∞·ª£ng m√£ s·∫£n ph·∫©m d·ª± ki·∫øn" />
        </td>

        <td>
            <textarea 
                name="import_check_boxes[<?php echo $index; ?>][product_codes]" 
                class="product-codes-input"
                data-index="<?php echo esc_attr($index); ?>"
                rows="4"
                style="width: 350px;"
                placeholder="Nh·∫≠p m√£ s·∫£n ph·∫©m (ph·∫£i t·ªìn t·∫°i trong DB v·ªõi status=unused)"
                title="Danh s√°ch m√£ s·∫£n ph·∫©m trong th√πng n√†y"
            ><?php echo esc_textarea($product_codes); ?></textarea>
            <span class="db-status-indicator" id="products_db_status_<?php echo $index; ?>"></span>
        </td>
        
        <td>
            <input type="date"
                name="import_check_boxes[<?php echo $index; ?>][lot_date]"
                value="<?php echo esc_attr($lot_date); ?>"
                placeholder="Nh·∫≠p l√¥ date"
                title="L√¥ date cho th√πng n√†y (b·∫Øt bu·ªôc)"
                required />
        </td>
        
        <td>
            <div id="box_status_<?php echo esc_attr($index); ?>" style="font-size: 12px; max-width: 150px;">
                <em style="color: #666;">Nh·∫≠p th√¥ng tin th√πng h√†ng</em>
            </div>
            <div id="box_message_<?php echo esc_attr($index); ?>" style="font-size: 12px; max-width: 200px;">
                <em style="color: #666;">Nh·∫≠p th√¥ng tin ƒë·ªÉ ki·ªÉm tra</em>
            </div>
        </td>
        
        <td><button type="button" class="button remove-box-row" title="X√≥a th√πng n√†y">‚úï</button></td>
    </tr>
    <?php
    return ob_get_clean();
}

// Product
add_action('save_post_product', function($post_id) {
    if (get_post_type($post_id) !== 'product') return;

    $existing_id = get_post_meta($post_id, 'custom_prod_id', true);
    if (empty($existing_id)) {
        $assigned_ids = get_posts([
            'post_type' => 'product',
            'numberposts' => -1,
            'fields' => 'ids',
            'meta_key' => 'custom_prod_id',
            'meta_compare' => 'EXISTS',
        ]);

        $used_ids = array_map(function($id) {
            return get_post_meta($id, 'custom_prod_id', true);
        }, $assigned_ids);

        for ($i = 1; $i <= 99; $i++) {
            $formatted = str_pad($i, 2, '0', STR_PAD_LEFT);
            if (!in_array($formatted, $used_ids)) {
                update_post_meta($post_id, 'custom_prod_id', $formatted);
                break;
            }
        }
    }
});

add_filter('manage_edit-product_columns', function($columns) {
    $columns['custom_prod_id'] = 'M√£ SP';
    return $columns;
});

add_action('manage_product_posts_custom_column', function($column, $post_id) {
    if ($column === 'custom_prod_id') {
        echo esc_html(get_post_meta($post_id, 'custom_prod_id', true));
    }
}, 10, 2);

add_action('wp_ajax_check_barcode_status', 'ajax_check_barcode_status');
add_action('wp_ajax_nopriv_check_barcode_status', 'ajax_check_barcode_status');

function ajax_check_barcode_status() {
    global $wpdb;
    
    // Verify nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'check_barcode_nonce')) {
        wp_die('Security check failed');
    }
    
    $type = sanitize_text_field($_POST['type']);
    $codes = $_POST['codes'];
    $response = [];
    
    if ($type === 'box') {
        $box_table = BIZGPT_PLUGIN_WP_BOX_MANAGER;
        
        foreach ($codes as $code) {
            $code = sanitize_text_field($code);
            if (empty($code)) continue;
            
            $box = $wpdb->get_row($wpdb->prepare(
                "SELECT * FROM $box_table WHERE barcode = %s",
                $code
            ));
            
            if (!$box) {
                $response[$code] = [
                    'exists' => false,
                    'status' => null,
                    'message' => 'M√£ th√πng kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng'
                ];
            } else {
                $response[$code] = [
                    'exists' => true,
                    'status' => $box->status,
                    'message' => $box->status === 'unused' ? 'OK' : 'M√£ th√πng ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng'
                ];
            }
        }
    } else if ($type === 'product') {
        $barcode_table = BIZGPT_PLUGIN_WP_BARCODE;
        
        foreach ($codes as $code) {
            $code = sanitize_text_field($code);
            if (empty($code)) continue;
            
            $barcode = $wpdb->get_row($wpdb->prepare(
                "SELECT * FROM $barcode_table WHERE barcode = %s",
                $code
            ));
            
            if (!$barcode) {
                $response[$code] = [
                    'exists' => false,
                    'status' => null,
                    'message' => 'M√£ s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng'
                ];
            } else {
                $response[$code] = [
                    'exists' => true,
                    'status' => $barcode->status,
                    'message' => $barcode->status === 'unused' ? 'OK' : 'M√£ s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng'
                ];
            }
        }
    }
    
    wp_send_json_success($response);
}

add_action('admin_footer', function() {
    $screen = get_current_screen();
    if ($screen && $screen->post_type === 'import_check') {
        ?>
        <script>
            var check_barcode_nonce = '<?php echo wp_create_nonce('check_barcode_nonce'); ?>';
            var ajax_url = '<?php echo admin_url('admin-ajax.php'); ?>';
        </script>
        <?php
    }
});

add_action('wp_ajax_check_product_box_assignment', 'check_product_box_assignment_callback');
add_action('wp_ajax_nopriv_check_product_box_assignment', 'check_product_box_assignment_callback');

function check_product_box_assignment_callback() {
    // Verify nonce
    if (!wp_verify_nonce($_POST['nonce'], 'check_barcode_nonce')) {
        wp_send_json_error('Invalid nonce');
        return;
    }
    
    $product_codes = isset($_POST['product_codes']) ? $_POST['product_codes'] : array();
    
    if (empty($product_codes) || !is_array($product_codes)) {
        wp_send_json_error('No product codes provided');
        return;
    }
    
    global $wpdb;
    $table_name = BIZGPT_PLUGIN_WP_BARCODE;
    
    $results = array();
    
    try {
        $sanitized_codes = array();
        foreach ($product_codes as $code) {
            $sanitized_code = sanitize_text_field(trim($code));
            if (!empty($sanitized_code)) {
                $sanitized_codes[] = $sanitized_code;
            }
        }
        
        if (empty($sanitized_codes)) {
            wp_send_json_error('No valid product codes provided');
            return;
        }
        
        // Create placeholders for prepared statement
        $placeholders = implode(',', array_fill(0, count($sanitized_codes), '%s'));
        
        // Query ƒë·ªÉ ki·ªÉm tra c√°c m√£ s·∫£n ph·∫©m v√† box_barcode c·ªßa ch√∫ng
        $query = $wpdb->prepare(
            "SELECT barcode, box_barcode, status 
             FROM {$table_name} 
             WHERE barcode IN ($placeholders)",
            $sanitized_codes
        );
        
        $db_results = $wpdb->get_results($query, ARRAY_A);
        
        // Initialize results for all requested codes
        foreach ($sanitized_codes as $code) {
            $results[$code] = array(
                'exists' => false,
                'assigned' => false,
                'box_barcode' => null,
                'status' => null
            );
        }
        
        // Process database results
        if ($db_results) {
            foreach ($db_results as $row) {
                $barcode = $row['barcode'];
                $box_barcode = $row['box_barcode'];
                $status = $row['status'];
                
                $results[$barcode] = array(
                    'exists' => true,
                    'assigned' => !empty($box_barcode),
                    'box_barcode' => $box_barcode,
                    'status' => $status
                );
            }
        }
        
        wp_send_json_success($results);
        
    } catch (Exception $e) {
        error_log('Error in check_product_box_assignment_callback: ' . $e->getMessage());
        wp_send_json_error('Database error occurred');
    }
}



